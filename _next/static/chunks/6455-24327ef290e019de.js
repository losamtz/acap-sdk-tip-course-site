"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[6455],{46455:(e,n,s)=>{s.d(n,{default:()=>g});var t=s(95155),a=s(88482),i=s(88145),r=s(97168),l=s(34964),c=s(19946);let o=(0,c.A)("Rss",[["path",{d:"M4 11a9 9 0 0 1 9 9",key:"pv89mb"}],["path",{d:"M4 4a16 16 0 0 1 16 16",key:"k0647b"}],["circle",{cx:"5",cy:"19",r:"1",key:"bfqh0e"}]]);var d=s(54213),u=s(381);let m=(0,c.A)("Play",[["polygon",{points:"6 3 20 12 6 21 6 3",key:"1oa8hb"}]]);var _=s(59099),p=s(33786),h=s(58497),v=s(38391),b=s(6874),x=s.n(b);function g(){return(0,t.jsxs)("div",{className:"w-full max-w-6xl mx-auto p-6 space-y-8",children:[(0,t.jsxs)("div",{className:"text-center mb-8",children:[(0,t.jsx)("h1",{className:"text-3xl font-bold mb-2",children:"Event Subscriber Code Sample"}),(0,t.jsx)("p",{className:"text-gray-600 dark:text-gray-400",children:'A complete example demonstrating how to subscribe to the "SendData" event and process system metrics.'})]}),(0,t.jsxs)(a.Zp,{children:[(0,t.jsx)(a.aR,{children:(0,t.jsxs)("div",{className:"flex items-start justify-between",children:[(0,t.jsxs)("div",{className:"flex items-center gap-3",children:[(0,t.jsx)("div",{className:"p-2 bg-purple-100 rounded-lg text-purple-600 dark:bg-purple-900/30 dark:text-purple-400",children:(0,t.jsx)(o,{className:"w-5 h-5"})}),(0,t.jsxs)("div",{children:[(0,t.jsx)(a.ZB,{className:"text-xl",children:'Subscribe to "SendData" Event'}),(0,t.jsx)(a.BT,{className:"text-base mt-1",children:"This code subscribes to system metrics events including temperature, load, and memory data."})]})]}),(0,t.jsxs)("div",{className:"flex flex-col items-end gap-2",children:[(0,t.jsx)(i.E,{variant:"secondary",children:"Intermediate"}),(0,t.jsx)(i.E,{variant:"outline",children:"Data Event"})]})]})}),(0,t.jsxs)(a.Wu,{className:"space-y-6",children:[(0,t.jsxs)("div",{children:[(0,t.jsx)("h3",{className:"font-semibold mb-2",children:"Key Implementation Components:"}),(0,t.jsxs)("ul",{className:"list-disc list-inside space-y-1 text-sm",children:[(0,t.jsxs)("li",{children:[(0,t.jsx)("strong",{children:"Subscription Callback:"})," Processes incoming events and extracts system metrics data"]}),(0,t.jsxs)("li",{children:[(0,t.jsx)("strong",{children:"Event Subscription Setup:"})," Configures topic hierarchy to match the SendData producer"]}),(0,t.jsxs)("li",{children:[(0,t.jsx)("strong",{children:"Main Loop Integration:"})," Implements GLib main loop for continuous event processing"]}),(0,t.jsxs)("li",{children:[(0,t.jsx)("strong",{children:"Resource Management:"})," Proper cleanup and memory management for production use"]})]})]}),(0,t.jsxs)(l.Tabs,{defaultValue:"callback",className:"w-full",children:[(0,t.jsxs)(l.TabsList,{className:"grid w-full grid-cols-3",children:[(0,t.jsxs)(l.TabsTrigger,{value:"callback",className:"flex items-center gap-2",children:[(0,t.jsx)(d.A,{className:"h-4 w-4"}),"Subscription Callback"]}),(0,t.jsxs)(l.TabsTrigger,{value:"subscription",className:"flex items-center gap-2",children:[(0,t.jsx)(u.A,{className:"h-4 w-4"}),"Send Data Subscription"]}),(0,t.jsxs)(l.TabsTrigger,{value:"main",className:"flex items-center gap-2",children:[(0,t.jsx)(m,{className:"h-4 w-4"}),"Main Function"]})]}),(0,t.jsx)(l.TabsContent,{value:"callback",className:"space-y-4",children:(0,t.jsxs)("div",{children:[(0,t.jsx)("h4",{className:"font-semibold mb-2",children:"Event Processing Callback"}),(0,t.jsx)("p",{className:"text-sm text-muted-foreground mb-4",children:"This callback function is invoked whenever a SendData event is received. It extracts temperature, load, and memory metrics from the event payload and logs them to syslog."}),(0,t.jsx)(h.A,{language:"c",style:v.A,customStyle:{margin:0,padding:"1rem",borderRadius:"0.5rem",fontSize:"0.875rem"},wrapLongLines:!0,children:'/**\n * brief Callback function which is called when event subscription is completed.\n *\n * This callback will be called when the subscription has been registered\n * with the event system. The event subscription can now be used for\n * subscribing to events.\n *\n * param subscription Subscription id.\n * param event Subscribed event.\n * param token Token as user data to the callback function.\n */\nstatic void subscription_callback(guint subscription, AXEvent* event, gpointer *userdata) {\n    const AXEventKeyValueSet* key_value_set;\n    gdouble temperature = 0.0;\n    gdouble load = 0.0;\n    gint used_memory = 0;\n    gint free_memory = 0;\n\n    // The subscription id is not used in this example\n    (void)subscription;\n    (void)userdata;\n\n    // Extract the AXEventKeyValueSet from the event\n    key_value_set = ax_event_get_key_value_set(event);\n\n    // Get the Value of the data event\n    ax_event_key_value_set_get_double(key_value_set, "Temperature", NULL, &temperature, NULL);\n    ax_event_key_value_set_get_double(key_value_set, "Load", NULL, &load, NULL);\n    ax_event_key_value_set_get_integer(key_value_set, "UsedMemory", NULL, &used_memory, NULL);\n    ax_event_key_value_set_get_integer(key_value_set, "FreeMemory", NULL, &free_memory, NULL);\n    \n    // Print a helpful message\n    syslog(LOG_INFO, "Temperature: %f C", temperature);\n    syslog(LOG_INFO, "Load: %f", load);\n    syslog(LOG_INFO, "Used Memory: %d (MB)", used_memory);\n    syslog(LOG_INFO, "Free Memory: %d (MB)", free_memory);\n\n    /*\n     * Free the received event, n.b. AXEventKeyValueSet should not be freed\n     * since it\'s owned by the event system until unsubscribing\n     */\n    ax_event_free(event);\n}'.trim()})]})}),(0,t.jsx)(l.TabsContent,{value:"subscription",className:"space-y-4",children:(0,t.jsxs)("div",{children:[(0,t.jsx)("h4",{className:"font-semibold mb-2",children:"Event Subscription Setup"}),(0,t.jsx)("p",{className:"text-sm text-muted-foreground mb-4",children:'This function creates the event subscription by defining the topic hierarchy that matches the SendData producer. It uses the VAPIX namespace "tnsaxis" for proper event routing.'}),(0,t.jsx)(h.A,{language:"c",style:v.A,customStyle:{margin:0,padding:"1rem",borderRadius:"0.5rem",fontSize:"0.875rem"},wrapLongLines:!0,children:'/**\n * brief Setup a subscription for an event.\n *\n * Initialize a subscription for AXEventKeyValueSet that matches\n * tnsaxis:SendData/tnsaxis:SendDataEvent, which is using the VAPIX namespace "tnsaxis".\n *\n * Topic: tnsaxis:CameraApplicationPlatform/tnsaxis:SendData/tnsaxis:SendDataEvent\n *\n * param handler Event handler.\n * param token Token as user data to the callback function.\n * return subscription id as integer.\n */\nstatic guint send_data_event_subscription(AXEventHandler* event_handler) {\n    AXEventKeyValueSet* key_value_set = NULL;\n    guint subscription                = 0;\n\n    key_value_set = ax_event_key_value_set_new();\n\n    // Set keys and namespaces for the event to be subscribed\n    ax_event_key_value_set_add_key_value(key_value_set,\n                                         "topic0",\n                                         "tnsaxis",\n                                         "CameraApplicationPlatform",\n                                         AX_VALUE_TYPE_STRING,\n                                         NULL);\n    ax_event_key_value_set_add_key_value(key_value_set,\n                                         "topic1",\n                                         "tnsaxis",\n                                         "SendData",\n                                         AX_VALUE_TYPE_STRING,\n                                         NULL);\n    ax_event_key_value_set_add_key_value(key_value_set,\n                                         "topic2",\n                                         "tnsaxis",\n                                         "SendDataEvent",\n                                         AX_VALUE_TYPE_STRING,\n                                         NULL);\n\n    /*\n     * Time to setup the subscription. Use the "token" input argument as\n     * input data to the callback function "subscription callback"\n     */\n    ax_event_handler_subscribe(event_handler,\n                               key_value_set,\n                               &subscription,\n                               (AXSubscriptionCallback)subscription_callback,\n                               NULL,\n                               NULL);\n\n    // The key/value set is no longer needed\n    ax_event_key_value_set_free(key_value_set);\n\n    return subscription;\n}'.trim()})]})}),(0,t.jsx)(l.TabsContent,{value:"main",className:"space-y-4",children:(0,t.jsxs)("div",{children:[(0,t.jsx)("h4",{className:"font-semibold mb-2",children:"Application Main Function"}),(0,t.jsx)("p",{className:"text-sm text-muted-foreground mb-4",children:"The main function initializes logging, creates the event handler, sets up the subscription, and runs the GLib main loop to continuously process events until termination."}),(0,t.jsx)(h.A,{language:"c",style:v.A,customStyle:{margin:0,padding:"1rem",borderRadius:"0.5rem",fontSize:"0.875rem"},wrapLongLines:!0,children:'/**\n * brief Main function which subscribes for an event.\n */\nint main(void) {\n    GMainLoop* main_loop          = NULL;\n    AXEventHandler* event_handler = NULL;\n    guint subscription            = 0;\n    \n    // Set up the user logging to syslog\n    openlog(NULL, LOG_PID, LOG_USER);\n    syslog(LOG_INFO, "Started logging from subscribe event application");\n\n    // Event handler\n    event_handler = ax_event_handler_new();\n    subscription  = send_data_event_subscription(event_handler);\n\n    // Main loop\n    main_loop = g_main_loop_new(NULL, FALSE);\n    g_main_loop_run(main_loop);\n\n    // Cleanup event handler\n    ax_event_handler_unsubscribe(event_handler, subscription, NULL);\n    ax_event_handler_free(event_handler);\n\n    // Free g_main_loop\n    g_main_loop_unref(main_loop);\n}'.trim()})]})})]}),(0,t.jsx)("div",{className:"flex gap-4",children:(0,t.jsx)(r.$,{className:"flex-1",asChild:!0,children:(0,t.jsxs)(x(),{href:"https://github.com/losamtz/axis-acap-tip-workshop/tree/master/event/subcribe-event-data",className:"flex items-center gap-2",children:[(0,t.jsx)(_.A,{className:"w-4 h-4 mr-2"}),"View Complete Code",(0,t.jsx)(p.A,{className:"w-3 h-3 ml-1"})]})})})]})]})]})}}}]);