"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[8344],{381:(e,n,a)=>{a.d(n,{A:()=>t});let t=(0,a(19946).A)("Settings",[["path",{d:"M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z",key:"1qme2f"}],["circle",{cx:"12",cy:"12",r:"3",key:"1v7zrd"}]])},19946:(e,n,a)=>{a.d(n,{A:()=>d});var t=a(12115);let s=e=>e.replace(/([a-z0-9])([A-Z])/g,"$1-$2").toLowerCase(),l=function(){for(var e=arguments.length,n=Array(e),a=0;a<e;a++)n[a]=arguments[a];return n.filter((e,n,a)=>!!e&&""!==e.trim()&&a.indexOf(e)===n).join(" ").trim()};var i={xmlns:"http://www.w3.org/2000/svg",width:24,height:24,viewBox:"0 0 24 24",fill:"none",stroke:"currentColor",strokeWidth:2,strokeLinecap:"round",strokeLinejoin:"round"};let r=(0,t.forwardRef)((e,n)=>{let{color:a="currentColor",size:s=24,strokeWidth:r=2,absoluteStrokeWidth:d,className:_="",children:o,iconNode:c,...u}=e;return(0,t.createElement)("svg",{ref:n,...i,width:s,height:s,stroke:a,strokeWidth:d?24*Number(r)/Number(s):r,className:l("lucide",_),...u},[...c.map(e=>{let[n,a]=e;return(0,t.createElement)(n,a)}),...Array.isArray(o)?o:[o]])}),d=(e,n)=>{let a=(0,t.forwardRef)((a,i)=>{let{className:d,..._}=a;return(0,t.createElement)(r,{ref:i,iconNode:n,className:l("lucide-".concat(s(e)),d),..._})});return a.displayName="".concat(e),a}},29621:(e,n,a)=>{a.d(n,{A:()=>t});let t=(0,a(19946).A)("Code",[["polyline",{points:"16 18 22 12 16 6",key:"z7tu5w"}],["polyline",{points:"8 6 2 12 8 18",key:"1eg1df"}]])},33786:(e,n,a)=>{a.d(n,{A:()=>t});let t=(0,a(19946).A)("ExternalLink",[["path",{d:"M15 3h6v6",key:"1q9fwt"}],["path",{d:"M10 14 21 3",key:"gplh6r"}],["path",{d:"M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6",key:"a6xqqp"}]])},34964:(e,n,a)=>{a.r(n),a.d(n,{Tabs:()=>r,TabsContent:()=>o,TabsList:()=>d,TabsTrigger:()=>_});var t=a(95155),s=a(12115),l=a(30064),i=a(53999);let r=l.bL,d=s.forwardRef((e,n)=>{let{className:a,...s}=e;return(0,t.jsx)(l.B8,{ref:n,className:(0,i.cn)("inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",a),...s})});d.displayName=l.B8.displayName;let _=s.forwardRef((e,n)=>{let{className:a,...s}=e;return(0,t.jsx)(l.l9,{ref:n,className:(0,i.cn)("inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",a),...s})});_.displayName=l.l9.displayName;let o=s.forwardRef((e,n)=>{let{className:a,...s}=e;return(0,t.jsx)(l.UC,{ref:n,className:(0,i.cn)("mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",a),...s})});o.displayName=l.UC.displayName},53999:(e,n,a)=>{a.d(n,{cn:()=>l});var t=a(52596),s=a(39688);function l(){for(var e=arguments.length,n=Array(e),a=0;a<e;a++)n[a]=arguments[a];return(0,s.QP)((0,t.$)(n))}},54213:(e,n,a)=>{a.d(n,{A:()=>t});let t=(0,a(19946).A)("Database",[["ellipse",{cx:"12",cy:"5",rx:"9",ry:"3",key:"msslwz"}],["path",{d:"M3 5V19A9 3 0 0 0 21 19V5",key:"1wlel7"}],["path",{d:"M3 12A9 3 0 0 0 21 12",key:"mv7ke4"}]])},59099:(e,n,a)=>{a.d(n,{A:()=>t});let t=(0,a(19946).A)("Github",[["path",{d:"M15 22v-4a4.8 4.8 0 0 0-1-3.5c3 0 6-2 6-5.5.08-1.25-.27-2.48-1-3.5.28-1.15.28-2.35 0-3.5 0 0-1 0-3 1.5-2.64-.5-5.36-.5-8 0C6 2 5 2 5 2c-.3 1.15-.3 2.35 0 3.5A5.403 5.403 0 0 0 4 9c0 3.5 3 5.5 6 5.5-.39.49-.68 1.05-.85 1.65-.17.6-.22 1.23-.15 1.85v4",key:"tonef"}],["path",{d:"M9 18c-4.51 2-5-2-7-2",key:"9comsn"}]])},71539:(e,n,a)=>{a.d(n,{A:()=>t});let t=(0,a(19946).A)("Zap",[["path",{d:"M4 14a1 1 0 0 1-.78-1.63l9.9-10.2a.5.5 0 0 1 .86.46l-1.92 6.02A1 1 0 0 0 13 10h7a1 1 0 0 1 .78 1.63l-9.9 10.2a.5.5 0 0 1-.86-.46l1.92-6.02A1 1 0 0 0 11 14z",key:"1xq2db"}]])},74466:(e,n,a)=>{a.d(n,{F:()=>i});var t=a(52596);let s=e=>"boolean"==typeof e?`${e}`:0===e?"0":e,l=t.$,i=(e,n)=>a=>{var t;if((null==n?void 0:n.variants)==null)return l(e,null==a?void 0:a.class,null==a?void 0:a.className);let{variants:i,defaultVariants:r}=n,d=Object.keys(i).map(e=>{let n=null==a?void 0:a[e],t=null==r?void 0:r[e];if(null===n)return null;let l=s(n)||s(t);return i[e][l]}),_=a&&Object.entries(a).reduce((e,n)=>{let[a,t]=n;return void 0===t||(e[a]=t),e},{});return l(e,d,null==n?void 0:null===(t=n.compoundVariants)||void 0===t?void 0:t.reduce((e,n)=>{let{class:a,className:t,...s}=n;return Object.entries(s).every(e=>{let[n,a]=e;return Array.isArray(a)?a.includes({...r,..._}[n]):({...r,..._})[n]===a})?[...e,a,t]:e},[]),null==a?void 0:a.class,null==a?void 0:a.className)}},74884:(e,n,a)=>{a.d(n,{default:()=>f});var t=a(95155),s=a(88482),l=a(88145),i=a(97168),r=a(34964),d=a(71539),_=a(19946);let o=(0,_.A)("ToggleLeft",[["rect",{width:"20",height:"12",x:"2",y:"6",rx:"6",ry:"6",key:"f2vt7d"}],["circle",{cx:"8",cy:"12",r:"2",key:"1nvbw3"}]]);var c=a(54213);let u=(0,_.A)("Filter",[["polygon",{points:"22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3",key:"1yg77f"}]]);var v=a(59099),p=a(33786),m=a(58497),h=a(38391),g=a(6874),y=a.n(g);let x=[{id:"send-pulse",title:"Send Pulse (Stateless)",icon:(0,t.jsx)(d.A,{className:"w-5 h-5"}),type:"Stateless Event",description:"Demonstrates stateless events - fire-and-forget signals that don't maintain state.",difficulty:"Beginner",features:["Stateless event declaration (stateless = 1)","Timer-based pulse sending every 5 seconds","Simple integer value increment (0-100)","Basic event handler lifecycle","Minimal resource usage"],codeSections:{constants:'#define SERVICE_ID   "send-pulse"\n\n#define TOPIC0_TAG  "CameraApplicationPlatform"\n#define TOPIC0_NAME "ACAP"\n#define TOPIC1_TAG  "SendPulse"\n#define TOPIC1_NAME "Send Pulse"\n#define EVENT_TAG   "SendPulseEvent"\n#define EVENT_NAME  "Send Pulse Event"',sendEvent:'static gboolean send_event(AppData *send_data) {\n    AXEventKeyValueSet *key_value_set = NULL;\n    AXEvent  *event                   = NULL;\n    \n    key_value_set = ax_event_key_value_set_new();\n\n    ax_event_key_value_set_add_key_value( key_value_set, "value", NULL, &send_data->value, AX_VALUE_TYPE_INT, NULL);\n    \n    // Create the event\n    // Use ax_event_new2 since ax_event_new is deprecated from 3.2\n    event = ax_event_new2(key_value_set, NULL);\n    \n    // The key/value set is no longer needed\n    ax_event_key_value_set_free(key_value_set);\n\n    if(!ax_event_handler_send_event(send_data->event_handler, send_data->event_id, event, NULL))\n      LOG_ERROR("Could not fire event\\n");\n    ax_event_free(event);\n\n    // Toggle value\n    send_data->value = send_data->value >= 100 ? 0 : send_data->value + 10;\n    \n    // Returning TRUE keeps the timer going\n    return TRUE;\n}',declarationComplete:'static void declaration_complete(guint declaration, int *start_value) {\n    syslog(LOG_INFO, "Declaration complete for: %d", declaration);\n    syslog(LOG_INFO, "Declaration complete start value: %d", *start_value);\n    app_data->value = *start_value;\n\n    // Set up a timer to be called every 5th second\n    app_data->timer = g_timeout_add_seconds(5, (GSourceFunc)send_event, app_data);\n}',setupDeclaration:'static guint setup_declaration(AXEventHandler* event_handler, guint *start_value) {\n    AXEventKeyValueSet* key_value_set = NULL;\n    guint declaration                 = 0;\n    GError* error                     = NULL;\n\n    key_value_set = ax_event_key_value_set_new();\n    \n    //Note that the name space is "tnsaxis:".  It is not recommended to create own name spaces or use the\n    //the ONVIF namespace "tns1:"\n\n    //TOPIC LEVEL 0\n    ax_event_key_value_set_add_key_value( key_value_set,"topic0", "tnsaxis", TOPIC0_TAG, AX_VALUE_TYPE_STRING,NULL);\n    //As we are using the standard CameraApplicationPlatform there is no need to set nice name  \n\n    //TOPIC LEVEL 1\n    ax_event_key_value_set_add_key_value( key_value_set,"topic1", "tnsaxis", TOPIC1_TAG, AX_VALUE_TYPE_STRING,NULL);\n    ax_event_key_value_set_add_nice_names( key_value_set,"topic1", "tnsaxis", TOPIC1_TAG, TOPIC1_NAME, NULL);\n\n    //TOPIC LEVEL 2\n    ax_event_key_value_set_add_key_value(  key_value_set, "topic2", "tnsaxis", EVENT_TAG , AX_VALUE_TYPE_STRING,NULL);\n    ax_event_key_value_set_add_nice_names( key_value_set, "topic2", "tnsaxis", EVENT_TAG, EVENT_NAME, NULL);\n\n    //EVENT DATA INSTANCE\n    //  Note: A value is normally not be needed for a puls event but is needed to make the event visible and\n    //  selectable in the cameras\' Event/ActionRule dialog web page\n    ax_event_key_value_set_add_key_value( key_value_set,"value", NULL, &start_value, AX_VALUE_TYPE_INT,NULL);\n    ax_event_key_value_set_mark_as_data( key_value_set, "value", NULL, NULL);\n    \n    //Note that the 3:rd parameter defines if he event is staeful or stateless.  1 = stateless, 0 = stateful\n    if( !ax_event_handler_declare(event_handler, \n                                  key_value_set, \n                                  1, \n                                  &declaration, \n                                  (AXDeclarationCompleteCallback)declaration_complete, \n                                  &start_value, \n                                  NULL)) {\n        syslog(LOG_WARNING, "Could not declare: %s", error->message);\n        g_error_free(error);\n    }   \n    \n    // The key/value set is no longer needed\n    ax_event_key_value_set_free( key_value_set );\n    return declaration;\n}',mainFunction:'int main(void) {\n  GMainLoop* main_loop  = NULL;\n  guint start_value     = 0;\n\n  // Set up the user logging to syslog\n  openlog(SERVICE_ID, LOG_PID|LOG_CONS, LOG_USER);\n  syslog(LOG_INFO, "Started logging from send event application");\n\n  //Initialize the event handler\n  app_data                = calloc(1, sizeof(AppData));\n  app_data->event_handler = ax_event_handler_new();\n  app_data->event_id      = setup_declaration(app_data->event_handler, &start_value);\n\n  // main loop\n  main_loop = g_main_loop_new( NULL, FALSE);\n  g_main_loop_run(main_loop);\n\n  /// Cleanup event handler\n  ax_event_handler_undeclare(app_data->event_handler, app_data->event_id, NULL);\n  ax_event_handler_free(app_data->event_handler);\n  free(app_data);\n\n  // Free g_main_loop\n  g_main_loop_unref(main_loop);\n\n  return 0;\n}'},useCases:["Motion detection alerts","Button press notifications","Periodic heartbeat signals","Alarm triggers"]},{id:"send-state",title:"Send State (Stateful)",icon:(0,t.jsx)(o,{className:"w-5 h-5"}),type:"Property State",description:"Shows stateful events that maintain persistent state - always in one of defined states.",difficulty:"Intermediate",features:["Stateful event declaration (stateless = 0)","State persistence between changes","Boolean state toggling (active/inactive)","Immediate callback on subscription","State change notifications"],codeSections:{constants:'#define SERVICE_ID   "send-state"\n\n#define TOPIC0_TAG  "CameraApplicationPlatform"\n#define TOPIC0_NAME "ACAP"\n#define TOPIC1_TAG  "SendState"\n#define TOPIC1_NAME "Send State"\n#define EVENT_TAG   "SendStateEvent"\n#define EVENT_NAME  "Send State Event"',sendEvent:'static gboolean send_event(AppData *send_data) {\n    AXEventKeyValueSet *key_value_set = NULL;\n    AXEvent  *event                   = NULL;\n    \n    key_value_set = ax_event_key_value_set_new();\n\n    ax_event_key_value_set_add_key_value( key_value_set, "active", NULL, &send_data->state_value, AX_VALUE_TYPE_BOOL, NULL);\n    \n    // Create the event\n    // Use ax_event_new2 since ax_event_new is deprecated from 3.2\n    event = ax_event_new2(key_value_set, NULL);\n    \n    // The key/value set is no longer needed\n    ax_event_key_value_set_free(key_value_set);\n\n    if(!ax_event_handler_send_event(send_data->event_handler, send_data->event_id, event, NULL))\n      LOG_ERROR("Could not fire event\\n");\n    ax_event_free(event);\n\n    // Toggle state value\n    send_data->state_value = !send_data->state_value;\n    \n    // Returning TRUE keeps the timer going\n    return TRUE;\n}',declarationComplete:'static void declaration_complete(guint declaration, int *value) {\n  syslog(LOG_INFO, "Declaration complete for: %d", declaration);\n\n    app_data->state_value = *value;\n\n    // Set up a timer to be called every 5th second\n    app_data->timer = g_timeout_add_seconds(5, (GSourceFunc)send_event, app_data);\n}',setupDeclaration:'static guint setup_declaration(AXEventHandler* event_handler, guint *start_value) {\n    AXEventKeyValueSet* key_value_set = NULL;\n    guint declaration                 = 0;\n    GError* error                     = NULL;\n\n    key_value_set = ax_event_key_value_set_new();\n    \n    //Note that the name space is "tnsaxis:".  It is not recommended to create own name spaces or use the\n    //the ONVIF namespace "tns1:"\n\n    //TOPIC LEVEL 0\n    ax_event_key_value_set_add_key_value( key_value_set,"topic0", "tnsaxis", TOPIC0_TAG, AX_VALUE_TYPE_STRING,NULL);\n    //As we are using the standard CameraApplicationPlatform there is no need to set nice name  \n\n    //TOPIC LEVEL 1\n    ax_event_key_value_set_add_key_value( key_value_set,"topic1", "tnsaxis", TOPIC1_TAG, AX_VALUE_TYPE_STRING,NULL);\n    ax_event_key_value_set_add_nice_names( key_value_set,"topic1", "tnsaxis", TOPIC1_TAG, TOPIC1_NAME, NULL);\n\n    //TOPIC LEVEL 2\n    ax_event_key_value_set_add_key_value(  key_value_set, "topic2", "tnsaxis", EVENT_TAG , AX_VALUE_TYPE_STRING,NULL);\n    ax_event_key_value_set_add_nice_names( key_value_set, "topic2", "tnsaxis", EVENT_TAG, EVENT_NAME, NULL);\n\n    //EVENT DATA INSTANCE\n    // A bool data instance called "active" will hold the event state 0 or 1  \n    ax_event_key_value_set_add_key_value( key_value_set,"active", NULL, &start_value, AX_VALUE_TYPE_BOOL, NULL);\n    ax_event_key_value_set_mark_as_data( key_value_set, "active", NULL, NULL);\n    \n    //Note that the 3:rd parameter defines if he event is stateful or stateless.  1 = stateless, 0 = stateful\n    if( !ax_event_handler_declare(event_handler, \n                                  key_value_set, \n                                  0,              // here defines state (0)\n                                  &declaration, \n                                  (AXDeclarationCompleteCallback)declaration_complete, \n                                  &start_value, \n                                  NULL)) {\n        syslog(LOG_WARNING, "Could not declare: %s", error->message);\n        g_error_free(error);\n    }   \n    \n    // The key/value set is no longer needed\n    ax_event_key_value_set_free( key_value_set );\n    return declaration;\n}',mainFunction:'int main(void) {\n  GMainLoop* main_loop  = NULL;\n  guint start_value     = 0;\n\n  // Set up the user logging to syslog\n  openlog(SERVICE_ID, LOG_PID|LOG_CONS, LOG_USER);\n  syslog(LOG_INFO, "Started logging from send event application");\n\n  //Initialize the event handler\n  app_data                = calloc(1, sizeof(AppData));\n  app_data->event_handler = ax_event_handler_new();\n  app_data->event_id      = setup_declaration(app_data->event_handler, &start_value);\n\n  // main loop\n  main_loop = g_main_loop_new( NULL, FALSE);\n  g_main_loop_run(main_loop);\n\n  /// Cleanup event handler\n  ax_event_handler_undeclare(app_data->event_handler, app_data->event_id, NULL);\n  ax_event_handler_free(app_data->event_handler);\n  free(app_data);\n\n  // Free g_main_loop\n  g_main_loop_unref(main_loop);\n\n  return 0;\n}'},useCases:["I/O port states (active/inactive)","Feature enable/disable status","Connection status monitoring","System mode indicators"]},{id:"send-data",title:"Send Data",icon:(0,t.jsx)(c.A,{className:"w-5 h-5"}),type:"Data Event",description:"Comprehensive example sending multiple data types - temperature, load, memory usage with realistic sensor simulation.",difficulty:"Intermediate",features:["Multiple data types (double, int)","Realistic sensor data simulation","Application-specific data marking","Timer-based data collection (3 seconds)","Comprehensive error handling"],codeSections:{constants:'#define SERVICE_ID   "send-data"\n\n#define TOPIC0_TAG  "CameraApplicationPlatform"\n#define TOPIC0_NAME "ACAP"\n#define TOPIC1_TAG  "SendData"\n#define TOPIC1_NAME "Send Data"\n#define EVENT_TAG   "SendDataEvent"\n#define EVENT_NAME  "Send Data Event"\n\n#define TOTAL_MEMORY 500 // Simulate total memory (e.g. 500MB)',generateRandomData:'static void generate_random_data(AppData *app_data) {\n\n  // Simulate temperature between 20.0 and 80.0 degrees Celsius\n  app_data->temperature = 20.0 + (rand() % 6000) / 100.0;  // 20.0 to 80.0\n\n  // Simulate system load as a float between 0.0 and 4.0 (e.g. CPU load avg)\n  app_data->load = (rand() % 400) / 100.0;\n\n  // Simulate used memory between 0 and total\n  app_data->used_memory = rand() % TOTAL_MEMORY;\n  \n  // Free memory is the rest\n  app_data->free_memory = TOTAL_MEMORY - app_data->used_memory;\n\n  LOG("used memory: %u MB, free memory: %u MB\\n", app_data->used_memory, app_data->free_memory);\n}',sendEvent:'static gboolean send_data(AppData *send_data) {\n\n  AXEventKeyValueSet *key_value_set = NULL;\n  AXEvent *event = NULL;\n\n  generate_random_data(send_data);\n  key_value_set = ax_event_key_value_set_new();\n\n  // Add the variable elements of the event to the set\n    \n    if(!ax_event_key_value_set_add_key_value(key_value_set, "Temperature", NULL,\n                                         &app_data->temperature,\n                                         AX_VALUE_TYPE_DOUBLE, NULL)) {\n        syslog(LOG_WARNING, "Could not add temperature key/value pair");\n    }                                        \n    if(!ax_event_key_value_set_add_key_value(key_value_set, "Load", NULL,\n                                       &app_data->load, AX_VALUE_TYPE_DOUBLE,\n                                       NULL)) {\n        syslog(LOG_WARNING, "Could not add load key/value pair");\n    }\n  \n    if(!ax_event_key_value_set_add_key_value(key_value_set, "UsedMemory", NULL,\n                                        &app_data->used_memory, AX_VALUE_TYPE_INT,\n                                        NULL)) {\n        syslog(LOG_WARNING, "Could not add used memory key/value pair");\n    }\n\n    if(!ax_event_key_value_set_add_key_value(key_value_set, "FreeMemory", NULL,\n                                        &app_data->free_memory, AX_VALUE_TYPE_INT,\n                                        NULL)) {\n        syslog(LOG_WARNING, "Could not add free memory key/value pair");\n    }\n\n  // Create the event\n  event = ax_event_new2(key_value_set, NULL);\n\n  // The key/value set is no longer needed\n  ax_event_key_value_set_free(key_value_set);\n\n  if (!ax_event_handler_send_event(send_data->event_handler, \n                                        send_data->event_id, \n                                        event, \n                                        NULL)) {\n    LOG_ERROR("Could not fire event\\n");\n  }\n  else\n    LOG("sent data event");\n\n  ax_event_free(event);\n\n  // Returning TRUE keeps the timer going\n  return TRUE;\n}',declarationComplete:'static void declaration_complete(guint declaration, gdouble *value) {\n\n    LOG("Declaration complete for: %d\\n", declaration);\n    \n    app_data->temperature = *value;\n    app_data->load = 0.0;\n    app_data->used_memory = 0;\n    app_data->free_memory = 0;\n\n    // timer to be called every 3th second\n    app_data->timer = g_timeout_add_seconds(3, (GSourceFunc)send_data, app_data);\n\n}',setupDeclaration:'static guint setup_declaration(AXEventHandler *event_handler) {\n\n      AXEventKeyValueSet *key_value_set = NULL;\n      guint declaration                 = 0;\n      \n      gdouble start_value               = 0.0;\n\n      gdouble temperature               = 0.5;\n      gdouble load                      = 0.0;\n      guint used_memory                 = 0;\n      guint free_memory                 = 0;\n\n      key_value_set = ax_event_key_value_set_new();\n\n      // OMITING ERROR HANDLING!\n\n      //TOPIC LEVEL 0 \n      ax_event_key_value_set_add_key_value( key_value_set,"topic0", "tnsaxis", TOPIC0_TAG, AX_VALUE_TYPE_STRING, NULL);\n      //As we are using the standard CameraApplicationPlatform there is no need to set nice name  \n\n      //TOPIC LEVEL 1\n      ax_event_key_value_set_add_key_value( key_value_set,"topic1", "tnsaxis", TOPIC1_TAG, AX_VALUE_TYPE_STRING, NULL);\n      ax_event_key_value_set_add_nice_names( key_value_set,"topic1", "tnsaxis", TOPIC1_TAG, TOPIC1_NAME, NULL);\n\n      //TOPIC LEVEL 2\n      ax_event_key_value_set_add_key_value(  key_value_set, "topic2", "tnsaxis", EVENT_TAG , AX_VALUE_TYPE_STRING, NULL);\n      ax_event_key_value_set_add_nice_names( key_value_set, "topic2", "tnsaxis", EVENT_TAG, EVENT_NAME, NULL);\n\n      // A data event is typically used for a specific client/application that knows how to process the data.\n      // If the event is not intended to trigger general actions it is a good idea to tag the event\n      // with "isApplicationData" to requests clients/actionrules not to display the event.\n      ax_event_key_value_set_mark_as_user_defined( key_value_set, "topic2", "tnsaxis", "isApplicationData", NULL);\n\n      //EVENT DATA INSTANCE\n      // A tag id that holds the user data Temperature.  It is recommended to mark event user data with "isApplicationData"\n      ax_event_key_value_set_add_key_value(key_value_set, "Temperature", NULL, &temperature , AX_VALUE_TYPE_DOUBLE, NULL);\n      ax_event_key_value_set_mark_as_data(key_value_set, "Temperature", NULL, NULL);\n      ax_event_key_value_set_mark_as_user_defined(key_value_set, "Temperature", NULL, "isApplicationData", NULL);\n\n      // Data Load\n      ax_event_key_value_set_add_key_value(key_value_set, "Load", NULL, &load, AX_VALUE_TYPE_DOUBLE, NULL);\n      ax_event_key_value_set_mark_as_data(key_value_set, "Load", NULL, NULL);\n      ax_event_key_value_set_mark_as_user_defined(key_value_set, "Load", NULL, "isApplicationData", NULL);\n\n      // Data Used Memory\n      ax_event_key_value_set_add_key_value(key_value_set, "UsedMemory", NULL, &used_memory, AX_VALUE_TYPE_INT, NULL);\n      ax_event_key_value_set_add_nice_names( key_value_set, "UsedMemory", NULL, "UsedMemory", "Used Memory (MB)", NULL);\n      ax_event_key_value_set_mark_as_data(key_value_set, "UsedMemory", NULL, NULL);\n      ax_event_key_value_set_mark_as_user_defined(key_value_set, "UsedMemory", NULL, "isApplicationData", NULL);\n\n      // Data Free Memory\n      ax_event_key_value_set_add_key_value(key_value_set, "FreeMemory", NULL, &free_memory, AX_VALUE_TYPE_INT, NULL);\n      ax_event_key_value_set_add_nice_names( key_value_set, "FreeMemory", NULL, "FreeMemory", "Free Memory (MB)", NULL);\n      ax_event_key_value_set_mark_as_data(key_value_set, "FreeMemory", NULL, NULL);\n      ax_event_key_value_set_mark_as_user_defined(key_value_set, "FreeMemory", NULL, "isApplicationData", NULL);\n      \n      //Note that the 3:rd parameter defines if the event is stateful or stateless.  1 = stateless, 0 = stateful\n      if( !ax_event_handler_declare(event_handler, \n                                        key_value_set, \n                                        1, \n                                        &declaration, \n                                        (AXDeclarationCompleteCallback)declaration_complete, \n                                        &start_value, \n                                        NULL))\n        LOG_ERROR("Could not declare event\\n");\n\n      ax_event_key_value_set_free(key_value_set);\n\n      return declaration;\n}',mainFunction:"int main(void) {\n\n      GMainLoop* main_loop  = NULL;\n      \n      openlog(SERVICE_ID, LOG_PID|LOG_CONS, LOG_USER);\n      main_loop = g_main_loop_new( NULL, FALSE);\n\n      //Initialize the event handler\n      app_data                = calloc(1, sizeof(AppData));\n      app_data->event_handler = ax_event_handler_new();\n      app_data->event_id      = setup_declaration(app_data->event_handler);\n      \n      g_main_loop_run(main_loop);\n\n      /// Cleanup event handler\n      ax_event_handler_undeclare(app_data->event_handler, app_data->event_id, NULL);\n      ax_event_handler_free(app_data->event_handler);\n      free(app_data);\n\n      // Free g_main_loop\n      g_main_loop_unref(main_loop);\n\n      closelog();\n\n      return 0;\n}"},useCases:["Sensor data collection","System monitoring","Multi-parameter events","IoT device communication"]},{id:"dropdown-filter",title:"Dropdown Filter Setup",icon:(0,t.jsx)(u,{className:"w-5 h-5"}),type:"Advanced Configuration",description:"Advanced example creating dropdown UI integration with 11 filter values (0-100 in steps of 10) for camera web interface.",difficulty:"Advanced",features:["Multiple event declarations (11 total)","Dropdown UI integration with mark_as_source","Value cycling through 0-100 in steps of 10","Single timer for all declarations","Advanced event ID management"],codeSections:{constants:'#define SERVICE_ID   "send-pulse-drop-down"\n\n#define TOPIC0_TAG  "CameraApplicationPlatform"\n#define TOPIC0_NAME "ACAP"\n#define TOPIC1_TAG  "SendPulseDropDown"\n#define TOPIC1_NAME "Send Pulse Dropdown"\n#define EVENT_TAG   "SendPulseDropDownEvent"\n#define EVENT_NAME  "Send Pulse Drop Down Event"\n\n#define MAX_DECLARATIONS 11  // 0 to 100 in steps of 10',setupValues:"static void setup_values(void) {\n  for (int i = 0; i < MAX_DECLARATIONS; ++i) {\n        guint value = i * 10;\n        app_data->values[i] = value;\n  }\n}",sendEvent:'static gboolean send_event(AppData *send_data) {\n\n    AXEventKeyValueSet *key_value_set = NULL;\n    AXEvent  *event                   = NULL;\n    \n    key_value_set = ax_event_key_value_set_new();\n\n    guint value = send_data->values[send_data->value_index];\n    guint event_id = send_data->event_ids[send_data->value_index];\n\n    ax_event_key_value_set_add_key_value(key_value_set, "value", NULL, &value, AX_VALUE_TYPE_INT, NULL);\n\n    // Create the event\n    event = ax_event_new2(key_value_set, NULL);\n    // The key/value set is no longer needed\n    ax_event_key_value_set_free(key_value_set);\n\n    if (!ax_event_handler_send_event(send_data->event_handler, event_id, event, NULL)) {\n        LOG_ERROR("Could not fire event with value: %u\\n", value);\n    } else {\n        LOG("Event sent with value: %u\\n", value);\n    }\n\n    ax_event_free(event);\n\n    // Update index\n    send_data->value_index = (send_data->value_index + 1) % MAX_DECLARATIONS;\n\n    return TRUE;\n}',declarationComplete:'static void declaration_complete(guint declaration, guint *value) {\n\n    syslog(LOG_INFO, "Declaration complete for: %d with value: %d", declaration, *value);\n\n    \n     // Start timer only once (after declaring the "0" value)\n    if(*value == 0) {\n        // Set up a timer to be called every 5th second\n        app_data->timer = g_timeout_add_seconds(5, (GSourceFunc)send_event, app_data);\n        LOG("Timer started.\\n");\n    }\n}',setupDeclaration:'static guint setup_declaration(AXEventHandler* event_handler, guint *value) {\n\n    AXEventKeyValueSet* key_value_set = NULL;\n    guint declaration                 = 0;\n    GError* error                     = NULL;\n\n    key_value_set = ax_event_key_value_set_new();\n\n    ax_event_key_value_set_add_key_value(key_value_set, "topic0", "tnsaxis", TOPIC0_TAG, AX_VALUE_TYPE_STRING, NULL);\n\n    ax_event_key_value_set_add_key_value(key_value_set, "topic1", "tnsaxis", TOPIC1_TAG, AX_VALUE_TYPE_STRING, NULL);\n    ax_event_key_value_set_add_nice_names(key_value_set, "topic1", "tnsaxis", TOPIC1_TAG, TOPIC1_NAME, NULL);\n\n    ax_event_key_value_set_add_key_value(key_value_set, "topic2", "tnsaxis", EVENT_TAG, AX_VALUE_TYPE_STRING, NULL);\n    ax_event_key_value_set_add_nice_names(key_value_set, "topic2", "tnsaxis", EVENT_TAG, EVENT_NAME, NULL);\n\n    // Declare value as SOURCE (will appear as dropdown in Axis UI)\n    ax_event_key_value_set_add_key_value(key_value_set, "value", NULL, value, AX_VALUE_TYPE_INT, NULL);\n    ax_event_key_value_set_mark_as_source(key_value_set, "value", NULL, NULL);\n\n    if (!ax_event_handler_declare(event_handler,\n                                      key_value_set,\n                                      1,  // Stateless\n                                      &declaration,\n                                      (AXDeclarationCompleteCallback)declaration_complete,\n                                      value,\n                                      NULL)) {\n            LOG_ERROR("Could not declare event: %s\\n", error->message);\n    }\n\n    ax_event_key_value_set_free(key_value_set);\n\n    return declaration;\n}',mainFunction:'int main(void) {\n\n      GMainLoop* main_loop  = NULL;\n\n      // Set up the user logging to syslog\n      openlog(SERVICE_ID, LOG_PID|LOG_CONS, LOG_USER);\n      syslog(LOG_INFO, "Started logging from send event application");\n\n      \n      //Initialize the event handler\n      app_data = calloc(1, sizeof(AppData));\n      setup_values();\n      app_data->event_handler = ax_event_handler_new();\n\n      for (int i = 0; i < MAX_DECLARATIONS; i++) {\n          app_data->event_ids[i] = setup_declaration(app_data->event_handler, &app_data->values[i]);\n      }\n      \n\n      // main loop\n      main_loop = g_main_loop_new( NULL, FALSE);\n        \n\n      g_main_loop_run(main_loop);\n\n      // Cleanup event handler\n      for (int i = 0; i < MAX_DECLARATIONS; ++i) {\n            ax_event_handler_undeclare(app_data->event_handler, app_data->event_ids[i], NULL);\n      }\n\n      ax_event_handler_free(app_data->event_handler);\n      free(app_data);\n\n      // Free g_main_loop\n      g_main_loop_unref(main_loop);\n      closelog();\n      return 0;\n}'},useCases:["Camera web UI dropdown integration","Multi-threshold event filtering","Configuration-based event selection","Advanced UI event management"]}];function f(){return(0,t.jsxs)("div",{className:"w-full max-w-6xl mx-auto p-6 space-y-8",children:[(0,t.jsxs)("div",{className:"text-center mb-8",children:[(0,t.jsx)("h1",{className:"text-3xl font-bold mb-2",children:"Event Producer Code Samples"}),(0,t.jsx)("p",{className:"text-gray-600 dark:text-gray-400",children:"Four complete examples demonstrating different event producer patterns"})]}),(0,t.jsxs)(s.Zp,{className:"bg-blue-50 border-blue-200 dark:bg-blue-900/20 dark:border-blue-800",children:[(0,t.jsxs)(s.aR,{children:[(0,t.jsxs)(s.ZB,{className:"flex items-center gap-3 text-blue-800 dark:text-blue-300",children:[(0,t.jsx)(v.A,{className:"w-5 h-5"}),"Sample Code Repository"]}),(0,t.jsx)(s.BT,{className:"text-blue-700 dark:text-blue-400",children:"Complete working examples from the AXIS ACAP TIP Workshop"})]}),(0,t.jsx)(s.Wu,{className:"text-blue-800 dark:text-blue-300",children:(0,t.jsxs)("div",{className:"grid md:grid-cols-2 gap-4 text-sm",children:[(0,t.jsxs)("div",{children:[(0,t.jsx)("h4",{className:"font-semibold mb-2",children:"Available Samples:"}),(0,t.jsxs)("ul",{className:"space-y-1",children:[(0,t.jsx)("li",{children:"• Send Pulse - Stateless events"}),(0,t.jsx)("li",{children:"• Send State - Stateful/property events"}),(0,t.jsx)("li",{children:"• Send Data - Multi-type data events"}),(0,t.jsx)("li",{children:"• Dropdown Filter - Advanced configuration"})]})]}),(0,t.jsxs)("div",{children:[(0,t.jsx)("h4",{className:"font-semibold mb-2",children:"Each Sample Includes:"}),(0,t.jsxs)("ul",{className:"space-y-1",children:[(0,t.jsx)("li",{children:"• Complete C source code"}),(0,t.jsx)("li",{children:"• Makefile for ACAP SDK"}),(0,t.jsx)("li",{children:"• Application manifest"}),(0,t.jsx)("li",{children:"• Documentation and usage guide"})]})]})]})})]}),(0,t.jsxs)(r.Tabs,{defaultValue:"send-pulse",className:"w-full",children:[(0,t.jsx)(r.TabsList,{className:"grid w-full grid-cols-2 sm:grid-cols-4",children:x.map(e=>(0,t.jsxs)(r.TabsTrigger,{value:e.id,className:"flex items-center gap-2 text-xs",children:[e.icon,(0,t.jsxs)("span",{className:"hidden sm:inline",children:[e.title.split(" ")[0]," ",e.title.split(" ")[1]]}),(0,t.jsx)("span",{className:"sm:hidden",children:e.title.split(" ")[0]})]},e.id))}),x.map(e=>{var n;return(0,t.jsxs)(r.TabsContent,{value:e.id,className:"space-y-6 mt-6",children:[(0,t.jsx)(s.Zp,{className:"border-l-4 border-l-blue-500",children:(0,t.jsx)(s.aR,{children:(0,t.jsxs)("div",{className:"flex items-start justify-between",children:[(0,t.jsxs)("div",{className:"flex items-center gap-3",children:[(0,t.jsx)("div",{className:"p-2 bg-blue-100 rounded-lg text-blue-600 dark:bg-blue-900/30 dark:text-blue-400",children:e.icon}),(0,t.jsxs)("div",{children:[(0,t.jsx)(s.ZB,{className:"text-xl",children:e.title}),(0,t.jsx)(s.BT,{className:"text-base mt-1",children:e.description})]})]}),(0,t.jsxs)("div",{className:"flex flex-col items-end gap-2",children:[(0,t.jsx)(l.E,{variant:"Beginner"===e.difficulty?"secondary":"Intermediate"===e.difficulty?"default":"destructive",children:e.difficulty}),(0,t.jsx)(l.E,{variant:"outline",children:e.type})]})]})})}),(0,t.jsxs)("div",{className:"grid md:grid-cols-2 gap-6",children:[(0,t.jsxs)(s.Zp,{children:[(0,t.jsx)(s.aR,{children:(0,t.jsx)(s.ZB,{className:"text-lg",children:"Key Features"})}),(0,t.jsx)(s.Wu,{children:(0,t.jsx)("ul",{className:"space-y-2",children:e.features.map((e,n)=>(0,t.jsxs)("li",{className:"flex items-start gap-2 text-sm",children:[(0,t.jsx)("div",{className:"w-2 h-2 bg-blue-500 rounded-full mt-1.5 flex-shrink-0"}),(0,t.jsx)("span",{children:e})]},n))})})]}),(0,t.jsxs)(s.Zp,{children:[(0,t.jsx)(s.aR,{children:(0,t.jsx)(s.ZB,{className:"text-lg",children:"Common Use Cases"})}),(0,t.jsx)(s.Wu,{children:(0,t.jsx)("div",{className:"flex flex-wrap gap-2",children:e.useCases.map((e,n)=>(0,t.jsx)(l.E,{variant:"secondary",className:"text-xs",children:e},n))})})]})]}),(0,t.jsxs)(s.Zp,{children:[(0,t.jsxs)(s.aR,{children:[(0,t.jsxs)(s.ZB,{className:"flex items-center gap-2",children:[(0,t.jsx)(c.A,{className:"w-5 h-5"}),"Code Implementation"]}),(0,t.jsx)(s.BT,{children:"Complete implementation details from the repository sample"})]}),(0,t.jsx)(s.Wu,{children:("send-pulse"===e.id||"send-state"===e.id||"send-data"===e.id||"dropdown-filter"===e.id)&&e.codeSections?(0,t.jsxs)(r.Tabs,{defaultValue:"send-event",className:"w-full",children:[(0,t.jsxs)(r.TabsList,{className:"grid w-full ".concat("send-data"===e.id||"dropdown-filter"===e.id?"grid-cols-5":"grid-cols-4"),children:[(0,t.jsx)(r.TabsTrigger,{value:"send-event",children:"Send Event"}),(0,t.jsx)(r.TabsTrigger,{value:"declaration-complete",children:"Declaration Complete"}),(0,t.jsx)(r.TabsTrigger,{value:"setup-declaration",children:"Setup Declaration"}),"send-data"===e.id&&(0,t.jsx)(r.TabsTrigger,{value:"generate-data",children:"Generate Data"}),"dropdown-filter"===e.id&&(0,t.jsx)(r.TabsTrigger,{value:"setup-values",children:"Setup Values"}),(0,t.jsx)(r.TabsTrigger,{value:"main-function",children:"Main Function"})]}),(0,t.jsx)(r.TabsContent,{value:"send-event",className:"space-y-4",children:(0,t.jsxs)("div",{children:[(0,t.jsx)("h4",{className:"font-semibold mb-2",children:"Event Sending Function"}),(0,t.jsx)("p",{className:"text-sm text-muted-foreground mb-4",children:"send-pulse"===e.id?"Creates and sends pulse events with incrementing values, maintaining timer-based execution.":"send-state"===e.id?"Creates and sends boolean state events, toggling between active/inactive states.":"send-data"===e.id?"Creates and sends multi-type data events with temperature, load, and memory information.":"Cycles through all 11 declared events, sending each with its corresponding value and event ID."}),(0,t.jsx)(m.A,{language:"c",style:h.A,customStyle:{margin:0,padding:"1rem",borderRadius:"0.5rem",fontSize:"0.875rem"},wrapLongLines:!0,children:e.codeSections.sendEvent})]})}),(0,t.jsx)(r.TabsContent,{value:"declaration-complete",className:"space-y-4",children:(0,t.jsxs)("div",{children:[(0,t.jsx)("h4",{className:"font-semibold mb-2",children:"Declaration Complete Callback"}),(0,t.jsx)("p",{className:"text-sm text-muted-foreground mb-4",children:"send-pulse"===e.id?"Callback triggered when event declaration is complete, starts the timer for periodic event sending.":"send-state"===e.id?"Callback triggered when event declaration is complete, starts the timer for periodic event sending.":(e.id,"Starts the timer only once when the first value (0) is declared, preventing multiple timers.")}),(0,t.jsx)(m.A,{language:"c",style:h.A,customStyle:{margin:0,padding:"1rem",borderRadius:"0.5rem",fontSize:"0.875rem"},wrapLongLines:!0,children:e.codeSections.declarationComplete})]})}),(0,t.jsx)(r.TabsContent,{value:"setup-declaration",className:"space-y-4",children:(0,t.jsxs)("div",{children:[(0,t.jsx)("h4",{className:"font-semibold mb-2",children:"Event Declaration Setup"}),(0,t.jsx)("p",{className:"text-sm text-muted-foreground mb-4",children:"send-pulse"===e.id?"Declares the event with proper topic hierarchy using tnsaxis namespace and configures as stateless.":"send-state"===e.id?"Declares the event with proper topic hierarchy using tnsaxis namespace and configures as stateful.":"send-data"===e.id?"Declares the data event with multiple fields marked as application data for specialized processing.":"Declares each event with mark_as_source to create dropdown options in the camera web interface."}),e.codeSections.constants&&(0,t.jsxs)("div",{className:"space-y-2",children:[(0,t.jsx)("h5",{className:"font-medium text-sm",children:"Constants Definition"}),(0,t.jsx)(m.A,{language:"c",style:h.A,customStyle:{margin:0,padding:"1rem",borderRadius:"0.5rem",fontSize:"0.875rem"},wrapLongLines:!0,children:e.codeSections.constants})]}),(0,t.jsx)(m.A,{language:"c",style:h.A,customStyle:{margin:0,padding:"1rem",borderRadius:"0.5rem",fontSize:"0.875rem"},wrapLongLines:!0,children:e.codeSections.setupDeclaration})]})}),"send-data"===e.id&&e.codeSections.generateRandomData&&(0,t.jsx)(r.TabsContent,{value:"generate-data",className:"space-y-4",children:(0,t.jsxs)("div",{children:[(0,t.jsx)("h4",{className:"font-semibold mb-2",children:"Random Data Generation"}),(0,t.jsx)("p",{className:"text-sm text-muted-foreground mb-4",children:"Simulates realistic sensor data including temperature (20-80\xb0C), system load (0-4.0), and memory usage within defined limits."}),(0,t.jsx)(m.A,{language:"c",style:h.A,customStyle:{margin:0,padding:"1rem",borderRadius:"0.5rem",fontSize:"0.875rem"},wrapLongLines:!0,children:e.codeSections.generateRandomData})]})}),"dropdown-filter"===e.id&&e.codeSections.setupValues&&(0,t.jsx)(r.TabsContent,{value:"setup-values",className:"space-y-4",children:(0,t.jsxs)("div",{children:[(0,t.jsx)("h4",{className:"font-semibold mb-2",children:"Values Array Setup"}),(0,t.jsx)("p",{className:"text-sm text-muted-foreground mb-4",children:"Initializes the values array with 11 entries (0, 10, 20, ..., 100) for dropdown options."}),(0,t.jsx)(m.A,{language:"c",style:h.A,customStyle:{margin:0,padding:"1rem",borderRadius:"0.5rem",fontSize:"0.875rem"},wrapLongLines:!0,children:e.codeSections.setupValues})]})}),(0,t.jsx)(r.TabsContent,{value:"main-function",className:"space-y-4",children:(0,t.jsxs)("div",{children:[(0,t.jsx)("h4",{className:"font-semibold mb-2",children:"Main Application Function"}),(0,t.jsx)("p",{className:"text-sm text-muted-foreground mb-4",children:"send-pulse"===e.id?"Initializes the application, sets up event handler, runs main loop, and handles cleanup.":"send-state"===e.id?"Initializes the application, sets up event handler, runs main loop, and handles cleanup.":"send-data"===e.id?"Initializes the application, sets up event handler, runs main loop, and handles cleanup.":"Initializes multiple event declarations and handles cleanup for all 11 events."}),(0,t.jsx)(m.A,{language:"c",style:h.A,customStyle:{margin:0,padding:"1rem",borderRadius:"0.5rem",fontSize:"0.875rem"},wrapLongLines:!0,children:e.codeSections.mainFunction})]})})]}):(0,t.jsx)(m.A,{language:"c",style:h.A,customStyle:{margin:0,padding:"1rem",borderRadius:"0.5rem",fontSize:"0.875rem"},wrapLongLines:!0,children:(null===(n=e.codePreview)||void 0===n?void 0:n.trim())||"// Code preview not available"})})]}),(0,t.jsx)("div",{className:"flex gap-4",children:(0,t.jsx)(i.$,{className:"flex-1",asChild:!0,children:(0,t.jsxs)(y(),{href:"send-pulse"===e.id?"https://github.com/losamtz/axis-acap-tip-workshop/tree/master/event/send-events-types/send-pulse":"send-state"===e.id?"https://github.com/losamtz/axis-acap-tip-workshop/tree/master/event/send-events-types/send-state":"send-data"===e.id?"https://github.com/losamtz/axis-acap-tip-workshop/tree/master/event/send-events-types/send-data":"https://github.com/losamtz/axis-acap-tip-workshop/tree/master/event/send-events-types/send-pulse-dropdown",className:"flex items-center gap-2",children:[(0,t.jsx)(v.A,{className:"w-4 h-4"}),"View Complete Code",(0,t.jsx)(p.A,{className:"w-3 h-3"})]})})})]},e.id)})]}),(0,t.jsxs)(s.Zp,{className:"bg-green-50 border-green-200 dark:bg-green-900/20 dark:border-green-800",children:[(0,t.jsx)(s.aR,{children:(0,t.jsx)(s.ZB,{className:"text-green-800 dark:text-green-300",children:"Implementation Notes"})}),(0,t.jsx)(s.Wu,{className:"text-green-800 dark:text-green-400",children:(0,t.jsxs)("div",{className:"grid md:grid-cols-2 gap-4 text-sm",children:[(0,t.jsxs)("div",{children:[(0,t.jsx)("h4",{className:"font-semibold mb-2",children:"Learning Progression:"}),(0,t.jsxs)("ol",{className:"list-decimal list-inside space-y-1",children:[(0,t.jsxs)("li",{children:[(0,t.jsx)("strong",{children:"Send Pulse:"})," Start here for basic concepts"]}),(0,t.jsxs)("li",{children:[(0,t.jsx)("strong",{children:"Send State:"})," Learn stateful event patterns"]}),(0,t.jsxs)("li",{children:[(0,t.jsx)("strong",{children:"Send Data:"})," Handle multiple data types"]}),(0,t.jsxs)("li",{children:[(0,t.jsx)("strong",{children:"Dropdown Filter:"})," Advanced UI integration"]})]})]}),(0,t.jsxs)("div",{children:[(0,t.jsx)("h4",{className:"font-semibold mb-2",children:"Key Differences:"}),(0,t.jsxs)("ul",{className:"list-disc list-inside space-y-1",children:[(0,t.jsxs)("li",{children:[(0,t.jsx)("strong",{children:"Stateless vs Stateful:"})," Event persistence behavior"]}),(0,t.jsxs)("li",{children:[(0,t.jsx)("strong",{children:"Data Types:"})," Simple values vs complex structures"]}),(0,t.jsxs)("li",{children:[(0,t.jsx)("strong",{children:"UI Integration:"})," Basic events vs dropdown configuration"]}),(0,t.jsxs)("li",{children:[(0,t.jsx)("strong",{children:"Complexity:"})," Single value vs multi-parameter events"]})]})]})]})})]})]})}},88145:(e,n,a)=>{a.d(n,{E:()=>r});var t=a(95155);a(12115);var s=a(74466),l=a(53999);let i=(0,s.F)("inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",{variants:{variant:{default:"border-transparent bg-primary text-primary-foreground hover:bg-primary/80",secondary:"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",destructive:"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",outline:"text-foreground"}},defaultVariants:{variant:"default"}});function r(e){let{className:n,variant:a,...s}=e;return(0,t.jsx)("div",{className:(0,l.cn)(i({variant:a}),n),...s})}},88482:(e,n,a)=>{a.d(n,{BT:()=>_,Wu:()=>o,ZB:()=>d,Zp:()=>i,aR:()=>r});var t=a(95155),s=a(12115),l=a(53999);let i=s.forwardRef((e,n)=>{let{className:a,...s}=e;return(0,t.jsx)("div",{ref:n,className:(0,l.cn)("rounded-lg border bg-card text-card-foreground shadow-sm",a),...s})});i.displayName="Card";let r=s.forwardRef((e,n)=>{let{className:a,...s}=e;return(0,t.jsx)("div",{ref:n,className:(0,l.cn)("flex flex-col space-y-1.5 p-6",a),...s})});r.displayName="CardHeader";let d=s.forwardRef((e,n)=>{let{className:a,...s}=e;return(0,t.jsx)("div",{ref:n,className:(0,l.cn)("text-2xl font-semibold leading-none tracking-tight",a),...s})});d.displayName="CardTitle";let _=s.forwardRef((e,n)=>{let{className:a,...s}=e;return(0,t.jsx)("div",{ref:n,className:(0,l.cn)("text-sm text-muted-foreground",a),...s})});_.displayName="CardDescription";let o=s.forwardRef((e,n)=>{let{className:a,...s}=e;return(0,t.jsx)("div",{ref:n,className:(0,l.cn)("p-6 pt-0",a),...s})});o.displayName="CardContent",s.forwardRef((e,n)=>{let{className:a,...s}=e;return(0,t.jsx)("div",{ref:n,className:(0,l.cn)("flex items-center p-6 pt-0",a),...s})}).displayName="CardFooter"},97168:(e,n,a)=>{a.d(n,{$:()=>_});var t=a(95155),s=a(12115),l=a(99708),i=a(74466),r=a(53999);let d=(0,i.F)("inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",{variants:{variant:{default:"bg-primary text-primary-foreground hover:bg-primary/90",destructive:"bg-destructive text-destructive-foreground hover:bg-destructive/90",outline:"border border-input bg-background hover:bg-accent hover:text-accent-foreground",secondary:"bg-secondary text-secondary-foreground hover:bg-secondary/80",ghost:"hover:bg-accent hover:text-accent-foreground",link:"text-primary underline-offset-4 hover:underline"},size:{default:"h-10 px-4 py-2",sm:"h-9 rounded-md px-3",lg:"h-11 rounded-md px-8",icon:"h-10 w-10"}},defaultVariants:{variant:"default",size:"default"}}),_=s.forwardRef((e,n)=>{let{className:a,variant:s,size:i,asChild:_=!1,...o}=e,c=_?l.DX:"button";return(0,t.jsx)(c,{className:(0,r.cn)(d({variant:s,size:i,className:a})),ref:n,...o})});_.displayName="Button"}}]);